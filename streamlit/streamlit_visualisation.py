# Import des librairies utiles
import os

import pandas as pd
import streamlit as st
from streamlit_option_menu import option_menu  # N√©cessaire pour afficher correctement la sidebar
import seaborn as sns
import matplotlib.pyplot as plt
import joblib
import requests
from PIL import Image
from os import environ

#get the api key
api_token = os.getenv('OPENWEATHER_API_KEY')

sns.set_theme(palette='gist_heat_r')  # fire theme :eyes:

# Configuration de la page
st.set_page_config(page_title="Projet Wildfires ‚Ä¢ Streamlit",
                   page_icon=":fire",
                   layout="wide")

# R√©duction du padding top sur le volet main
st.write('<style>div.block-container{padding-top:30px;}</style>',
         unsafe_allow_html=True)

# D√©finition de la side bar
with st.sidebar:
    st.write('<style>div.css-1adrfps.e1fqkh3o2{padding-top:0px;}</style>',
             unsafe_allow_html=True)
    selected = option_menu(
        menu_title="Projet Wildfires",
        options=["Introduction", "Allons en Alaska", "√âtude ¬´ Powerlines ¬ª", "Cartes Folium", "Et la s√©cheresse ?",
                 "Pr√©diction de feu", "Conclusion"],
        menu_icon="mortarboard-fill",
        icons=["play-circle", "play-circle", "play-circle", "play-circle", "play-circle", "play-circle", "play-circle"]
    )
    st.sidebar.markdown("---")
    st.markdown(
        "<p style='text-align: center; font-size: 18px'><b>Parcours Data Analyst</b><br><i>Formation Continue<br>Promo \"Janvier 2022\"</i></p>",
        unsafe_allow_html=True)
    st.markdown(
        "<p style='text-align: center; font-size: 18px'><b>Equipe projet</b><br><i>Cl√©ment FONTAINE<br>Fabien LAVERRIERE<br>Phuc NGUYEN DANG</i></p>",
        unsafe_allow_html=True)
    st.markdown("<p style='text-align: center; font-size: 18px'><b>Mentor</b><br><i>Gaspard<i></p>",
                unsafe_allow_html=True)

# S√©quences de if pour la r√©daction de chaque onglet
if selected == "Introduction":
    st.markdown("### Introduction")
    st.markdown(
        'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nisi nulla, volutpat sed euismod quis, hendrerit a odio. Integer dignissim volutpat ullamcorper. Integer commodo sapien finibus lacus tempus, sit amet consequat justo mollis. Quisque quis velit erat. In placerat scelerisque felis a laoreet. Curabitur sed justo ac lectus commodo scelerisque. Praesent ut nisi lectus. Vestibulum mollis varius ex sit amet placerat. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam erat volutpat.')
    st.write("Streamlit version:", st.__version__)

if selected == "Allons en Alaska":
    st.markdown("### Allons en Alaska")
    st.markdown(
        'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nisi nulla, volutpat sed euismod quis, hendrerit a odio. Integer dignissim volutpat ullamcorper. Integer commodo sapien finibus lacus tempus, sit amet consequat justo mollis. Quisque quis velit erat. In placerat scelerisque felis a laoreet. Curabitur sed justo ac lectus commodo scelerisque. Praesent ut nisi lectus. Vestibulum mollis varius ex sit amet placerat. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam erat volutpat.')

if selected == "√âtude ¬´ Powerlines ¬ª":
    st.markdown(" # √âtude ¬´ Powerlines ¬ª")
    st.markdown(" ## L'anomalie")
    st.markdown('L\'√©tude de la fr√©quence des feux par cause r√©v√®le une anomalie particuli√®re √† partir de l\'ann√©e '
                '2011 : une hausse des feux li√©s aux lignes haute-tension sans pr√©c√©dant')

    tab2, tab1 = st.tabs(["üìà Graphique", "üßÆ Classement des √âtats par feu"])
    df_powerline = pd.read_csv('Powerline_db.csv', index_col='OBJECTID')

    tab1.subheader('**Classement des ann√©es en fonction du nombre de feu**')
    df_fire_by_year = df_powerline['FIRE_YEAR'].value_counts()
    tab1.write(df_fire_by_year.loc[df_fire_by_year > df_fire_by_year.mean()])

    fig = sns.displot(df_powerline['FIRE_YEAR'], kde=True, height=6, aspect=2, );
    plt.axhline(y=df_powerline['FIRE_YEAR'].value_counts().mean(), color='blue', label='Moyenne');
    plt.xlabel("Ann√©e")
    plt.ylabel('Feux par an')
    tab2.subheader("Nombre de feu par an d√ªs aux lignes √©lectrique aux EUA")
    plt.legend();
    tab2.pyplot(fig)

    st.markdown(
        'Quand on regarde l\'evolution de ces feux par √©tat, en se concentrant sur les √©tats qui rapportent plus de 500 '
        'feux, on constate que le texas est le plus gros contributeur de cette anomalie, et de loin.')

    col11, col21 = st.columns(2)
    Top_state = df_powerline['STATE'].value_counts()
    Top_state = Top_state.loc[Top_state > 500]
    Top_state = Top_state.index.tolist()

    with col11:
        selected_state = st.radio("S√©lectionnez l'√âtat que vous souhaitez afficher", Top_state)
    with col21:
        if selected_state == Top_state[0]:
            fig = sns.displot(df_powerline.loc[df_powerline['STATE'] == selected_state, 'FIRE_YEAR'], kde=True,
                              height=5, aspect=2);
            plt.axhline(y=df_powerline['FIRE_YEAR'].value_counts().mean() / 50, color='blue',
                        label='Moyenne sur l\'ensemble des √âtats');
            plt.title(f'Nombre de feu par an pour {selected_state}', fontsize=15)
            plt.legend();
            st.pyplot(fig)
            st.markdown(
                'L\'√©chelle est tellement ecras√©e que les pr√©c√©dents enregistrements du Texas ne sont pas visible avant '
                'l\'anomalie, la moyenne inter-√©tat est affich√©e sur le 0 tellement les √©carts de valeurs sont importants.')

        if selected_state == Top_state[1]:
            fig = sns.displot(df_powerline.loc[df_powerline['STATE'] == selected_state, 'FIRE_YEAR'], kde=True,
                              height=5, aspect=2);
            plt.axhline(y=df_powerline['FIRE_YEAR'].value_counts().mean() / 50, color='blue',
                        label='Moyenne sur l\'ensemble des √©tats');
            plt.title(f'Nombre de feu par an pour {selected_state}', fontsize=15)
            plt.legend();
            st.pyplot(fig)

        if selected_state == Top_state[2]:
            fig = sns.displot(df_powerline.loc[df_powerline['STATE'] == selected_state, 'FIRE_YEAR'], kde=True,
                              height=5, aspect=2);
            plt.axhline(y=df_powerline['FIRE_YEAR'].value_counts().mean() / 50, color='blue',
                        label='Moyenne sur l\'ensemble des √©tats');
            plt.title(f'Nombre de feu par an pour {selected_state}', fontsize=15)
            plt.legend();
            st.pyplot(fig)

        if selected_state == Top_state[3]:
            fig = sns.displot(df_powerline.loc[df_powerline['STATE'] == selected_state, 'FIRE_YEAR'], kde=True,
                              height=5, aspect=2);
            plt.axhline(y=df_powerline['FIRE_YEAR'].value_counts().mean() / 50, color='blue',
                        label='Moyenne sur l\'ensemble des √©tats');
            plt.title(f'Nombre de feu par an pour {selected_state}', fontsize=15)
            plt.legend();
            st.pyplot(fig)

        if selected_state == Top_state[4]:
            fig = sns.displot(df_powerline.loc[df_powerline['STATE'] == selected_state, 'FIRE_YEAR'], kde=True,
                              height=5, aspect=2);
            plt.axhline(y=df_powerline['FIRE_YEAR'].value_counts().mean() / 50, color='blue',
                        label='Moyenne sur l\'ensemble des √©tats');
            plt.title(f'Nombre de feu par an pour {selected_state}', fontsize=15)
            plt.legend();
            st.pyplot(fig)

    st.markdown('## La recette du Texas pour les feux.')
    with st.expander('Un r√©seau expos√©'):
        st.markdown(
            'Le texas est principalement √©quip√© de lignes a√©riennes du fait de son r√©seau ancien et du co√ªt important'
            ' des lignes enterr√©es. La majorit√© du r√©seau texans est donc tr√®s expos√© aux incidents qui d√©clenchent'
            ' les incendies. ')
        st.markdown(
            '**Les lignes tomb√©es au sol** ‚Äì Les lignes √©lectriques peuvent tomber au sol (pour de nombreuses raisons), '
            'les disjoncteurs devraient se d√©clencher, mais dans 30 % des cas, ils consomment trop peu de courant pour '
            'fonctionner correctement et la ligne peut arquer pendant une longue p√©riode avant que le courant ne soit coup√©')
        st.markdown(
            '**Les contacts avec la v√©g√©tation** ‚Äì Les arbres et autres v√©g√©taux qui s\'immiscent dans les lignes √©lectriques '
            'peuvent provoquer des incendies de multiples fa√ßons, comme la chute d\'un arbre sur une ligne ou une branche qui '
            'touche deux cat√©naires.')
        st.markdown(
            '**Un contact entre les cat√©naires** ‚Äì Les cat√©naires doivent √™tre suffisamment espac√©s mais, dans certaines '
            'conditions (comme un vent fort), ils se touchent, forment des arcs et r√©pandent des particules m√©talliques chaudes '
            'qui peuvent enflammer la v√©g√©tation s√®che alentour.')
        st.markdown(
            '**Une d√©faillance de l\'√©quipement** ‚Äì De nombreux composants des lignes √©lectriques sont con√ßus pour servir un '
            'certain nombre d\'ann√©es et doivent √™tre remplac√©s √† intervalles r√©guliers. Sinon, ils tombent en panne.')

    with st.expander('Le Texas a son propre r√©seau √©lectrique'):
        st.markdown(
            'Le Texas est le seul √âtat am√©ricain dont le r√©seau √©lectrique n\'est pas interconnect√© au reste du pays. C\'est '
            'l\'une des raisons de la panne massive de l\'hivers 2021. Ainsi, les infrastructures √©lectriques ne sont pas contr√¥l√©es au '
            'niveau f√©d√©ral et sont g√©r√©es de mani√®re incoh√©rente avec le reste des √âtats-Unis.')

    with st.expander('Des infrastructures vieillissantes'):
        st.markdown(
            'Des rapports provenant de nombreuses r√©gions des √âtats-Unis montrent que les compagnies d\'√©lectricit√© sont '
            'poursuivies pour avoir n√©glig√© l\'infrastructure des lignes √©lectriques, notamment au Texas o√π une grande partie de'
            'l\'infrastructure appartient √† des soci√©t√©s priv√©es. De par leur conception, elles doivent donner un retour sur '
            'investissement, et non pas fonctionner au profit du plus grand nombre en opposition avec l\'√âtat. Le r√©sultat est '
            'qu\'elles font le minimum pour √©viter une d√©faillance syst√©mique, la plupart du temps c\'est suffisant, mais en cas '
            'de conditions inhabituelles, cela conduit √† des √©v√©nements catastrophiques : comme en 2011.')

    with st.expander('2011'):
        st.markdown(
            '2011 est une ann√©e de La Ni√±a, un ph√©nom√®ne m√©t√©orologique connu pour provoquer la s√©cheresse au Texas. Cette '
            'condition m√©t√©orologique entra√Æne l\'une des pires s√©cheresses de l\'histoire de l\'√âtat.'
            'Voici une petite analyse des donn√©es de la NOA :')

        # import data
        df_drougth = pd.read_csv('4101-pdsi-all-4-1992-2015.csv')
        # conerting to date
        df_drougth['Month'] = df_drougth['Date'].astype('str').apply(lambda x: x[-2:])
        df_drougth['Year'] = df_drougth['Date'].astype('str').apply(lambda x: x[0:4])
        df_drougth['Day'] = '01'
        df_drougth['Date'] = pd.to_datetime(df_drougth[['Month', 'Year', 'Day']])
        df_drougth.drop(['Month', 'Year', 'Day'], inplace=True, axis=1)  # cleaning
        # seting-up the hue value
        df_drougth['anomaly symbol'] = 1
        df_drougth.loc[df_drougth['Value'] < 0, 'anomaly symbol'] = -1
        df_drougth['x_label'] = df_drougth['Date'].dt.year  # seting up the plot
        fig = plt.figure(figsize=(20, 6))
        ax = fig.add_subplot(111)
        sns.barplot(x='x_label', y='Value', hue='anomaly symbol', data=df_drougth, ax=ax);
        plt.xticks(rotation=45)
        plt.xlabel("Ann√©e")
        plt.ylabel('Index de s√©v√©rit√© de Palmer. 0 = Normal')
        plt.title("√âvolution de l'index de s√©v√©rit√© de Palmer", fontsize=20)
        ax.legend_.remove();
        st.pyplot(fig)

        st.markdown('On voit ici tr√®s bien la s√©cheresse qui a √©t√© class√©e comme la pire des 127 derni√®res ann√©es.')

    st.markdown('## Conclusion')
    st.markdown(
        'On peut ici laisser de c√¥t√© un probl√®me dans l\'enregistrement des donn√©es, car en dehors de la p√©riode '
        'de s√©cheresse l\'anomalie disparait. ')
    st.markdown('Ce qui nous laisse une conjonction de facteurs pouvant expliquer l\'anomalie :')
    st.markdown('- Des standards de gestion du r√©seau √©lectrique tr√®s diff√©rents du reste de l\'Union')
    st.markdown('- Une s√®cheresse parmi les plus dures jamais enregistr√©e')
    st.markdown('- Des equipments vieillissants maintenant dans les conditions tout juste satisfaisante pour la '
                'continuit√© de l\'activit√© dans les conditions d\'op√©ration normales')
    st.markdown('On peut craindre que les ph√©nom√®nes exceptionnels se multipliants ce type d\'anomalie sera amen√© √† '
                'se reproduire')

if selected == "Cartes Folium":
    st.markdown("### L'√©volution des feux aux Etats-Unis en 3 cartes")
    st.write('Quelle m√©trique souhaitez-vous suivre par √©tat sur la p√©riode 1992-2015 ?')
    genre = st.radio('Faites un choix :',
                     ('Nombre cumul√© de feux', 'Surface br√ªl√©e cumul√©e', 'Pourcentage cumul√© du territoire br√ªl√©'),
                     index=0)
    st.markdown(
        'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nisi nulla, volutpat sed euismod quis, hendrerit a odio. Integer dignissim volutpat ullamcorper. Integer commodo sapien finibus lacus tempus, sit amet consequat justo mollis. Quisque quis velit erat. In placerat scelerisque felis a laoreet. Curabitur sed justo ac lectus commodo scelerisque. Praesent ut nisi lectus. Vestibulum mollis varius ex sit amet placerat. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam erat volutpat.')

if selected == "Et la s√©cheresse ?":
    st.markdown("### Et la s√©cheresse ?")
    st.markdown(
        'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nisi nulla, volutpat sed euismod quis, hendrerit a odio. Integer dignissim volutpat ullamcorper. Integer commodo sapien finibus lacus tempus, sit amet consequat justo mollis. Quisque quis velit erat. In placerat scelerisque felis a laoreet. Curabitur sed justo ac lectus commodo scelerisque. Praesent ut nisi lectus. Vestibulum mollis varius ex sit amet placerat. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam erat volutpat.')

if selected == "Pr√©diction de feu":
    model_clf = joblib.load('alaska_model.pkl')

    st.markdown("## Pr√©diction de feu en Alaska √† partir de la M√©t√©o du jour ")
    tab1, tab2 = st.tabs(["üëÄ Essayer le model", "üõ†Ô∏è Info de construction"])

    with tab1:
        st.markdown('#### Pr√©diction actuelles')
        # getting data from accuweather api
        response = requests.request("GET", f'https://api.openweathermap.org/data/3.0/onecall?lat=64.994774&lon=-150.631255&appid={api_token}&units=imperial')
        # building the dataframe
        # building the dataframe
        weather_data = pd.DataFrame([[response.json()['daily'][0]['temp']['day'],
                                      response.json()['daily'][0]['dew_point'],
                                      response.json()['daily'][0]['wind_speed'],
                                      response.json()['daily'][0]['wind_gust'],
                                      response.json()['daily'][0]['temp']['max'],
                                      response.json()['daily'][0]['temp']['min'],
                                      response.json()['daily'][0].get('rain')]],
                                    columns=['TEMP', 'DEWP', 'WDSP', 'GUST', 'MAX', 'MIN', 'PRCP'])
        if weather_data['PRCP'][0] == None:
            weather_data['PRCP'][0] = 0

        # prediction from data
        prediction = model_clf.predict_proba(weather_data)

        # Displaying probability
        pas_feu, feu = st.columns(2)
        pas_feu.metric("Probabilit√© d'avoir aucun feu", f'{round(prediction[0][0]*100, 2)} % ¬±15', "üå≥", delta_color='off')
        feu.metric("Probabilit√© d'avoir un feu", f'{round(prediction[0][1]*100, 2)} % ¬±15', "üî•", delta_color='off')

        # Displaying the source data
        st.markdown('Cette pr√©diction est donn√©e par rapport au pr√©dictions m√©t√©o actuelles pour la journ√©e de demain '
                    'par openweather pour l\'Alaska')
        temperature = round(((response.json()['daily'][0]['temp']['day']) -32) / 1.8, 2)
        temperature_max = round(((response.json()['daily'][0]['temp']['max']) - 32) / 1.8, 2)
        temperature_min = round(((response.json()['daily'][0]['temp']['min']) - 32) / 1.8, 2)
        dew_point = round(((response.json()['daily'][0]['dew_point']) - 32) / 1.8, 2)
        wind_speed = round((response.json()['daily'][0]['wind_speed'])*1.6093439999999, 2)
        gust_speed = round((response.json()['daily'][0]['wind_gust'])*1.6093439999999, 2)
        precipitation = round(weather_data['PRCP'][0]*25.4, 2)

        temp, maxi, mini, dwpt, wind, gust, precip = st.columns(7)
        temp.metric('Temperature', f'{temperature}¬∞C')
        maxi.metric('Temperature max', f'{temperature_max}¬∞C')
        mini.metric('Temperature min', f'{temperature_min}¬∞C')
        dwpt.metric('Point de ros√©', f'{dew_point}¬∞C')
        wind.metric('Vitesse du vent (km/h)', f'{wind_speed}')
        gust.metric('Rafales de vent (km/h)', f'{gust_speed}')
        precip.metric('Pr√©cipitations', f'{precipitation} mm')

        st.markdown('#### Testez vos propres donn√©es')
        col1, col2 = st.columns(2)
        with col1:
            temperature_s = st.slider('Temp√©rature moyenne (¬∞C)', value=temperature, min_value=-20.0, max_value=50.0, step=1.0)*1.8+32
            temperature_max_s = st.slider('Temp√©rature max (¬∞C)', value=temperature_max, min_value=temperature_s, max_value=55.0, step=1.0)*1.8+32
            temperature_min_s = st.slider('Temp√©rature min (¬∞C)', value=temperature_min, min_value=-25.0, max_value=temperature_s, step=1.0)*1.8+32
            dew_point_s = st.slider('Point de ros√©e (¬∞C)', value=dew_point, min_value=0.0, max_value=35.0, step=1.0)*1.8+32
        with col2:
            wind_speed_s = st.slider('Vitesse du vent (km/h)', value=wind_speed, min_value=0.0, max_value=100.0, step=1.0)*0.62137119223738
            gust_speed_s = st.slider('Vitesse des rafales (km/h)', value=gust_speed, min_value=wind_speed, max_value=100.0, step=1.0)*0.62137119223738
            precipitation_s = st.slider('Pr√©cipitation (mm)', value=float(precipitation), min_value=0.0, max_value=100.0, step=1.0)*0.039370078740158

        weather_data_s = pd.DataFrame([[temperature_s,
                                      dew_point_s,
                                      wind_speed_s,
                                      gust_speed_s,
                                      temperature_min_s,
                                      temperature_max_s,
                                      precipitation_s]],
                                    columns=['TEMP', 'DEWP', 'WDSP', 'GUST', 'MAX', 'MIN', 'PRCP'])

        # prediction from data
        prediction_s = model_clf.predict_proba(weather_data_s)

        # Displaying probability
        pas_feu, feu = st.columns(2)
        pas_feu.metric("Probabilit√© d'avoir aucun feu", f'{round(prediction_s[0][0]*100, 2)} % ¬±15', "üå≥", delta_color='off')
        feu.metric("Probabilit√© d'avoir un feu", f'{round(prediction_s[0][1]*100, 2)} % ¬±15', "üî•", delta_color='off')

    with tab2:
        st.markdown('Ce model √† √©t√© construit sur les donn√©es issues du global daily summary de la NOA. Il regroupe '
                    'les donn√©es de millers de stations m√©t√©o √† la surface du globe. Apr√®s un filtrage des donn√©e sur '
                    'la p√©riode et les stations qui nous int√©resse elle-ci on √©t√© group√©es par date et par √©tat. √Ä '
                    'chaque jour a √©t√© associ√© ou non la pr√©sence d\'un feu.')
        st.markdown('Un model d\'HistGradientBoostingClassifier qui donnait les meilleurs r√©sultats a √©t√© entrain√© '
                    '[pour chaque √©tat afin de respecter les diff√©rents biomes.')

        st.markdown('Le model donne d\'assez bon r√©sultat de pr√©diction, en voici sa courbe ROC:')
        image = Image.open('roc-curve.png')
        st.image(image)

        st.markdown('Voici la classification des feature par importance dans le model :')
        image = Image.open('feature-importance.png')
        st.image(image)

        st.markdown('L\'importance donn√©e √† la temp√©rature max nous donne un bon ordre d\'id√©e de l\'impact de '
                    'vagues de chaleurs exceptionnelles sur les feux')

if selected == "Conclusion":
    st.markdown("### Conclusion")
    st.markdown(
        'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nisi nulla, volutpat sed euismod quis, hendrerit a odio. Integer dignissim volutpat ullamcorper. Integer commodo sapien finibus lacus tempus, sit amet consequat justo mollis. Quisque quis velit erat. In placerat scelerisque felis a laoreet. Curabitur sed justo ac lectus commodo scelerisque. Praesent ut nisi lectus. Vestibulum mollis varius ex sit amet placerat. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam erat volutpat.')
